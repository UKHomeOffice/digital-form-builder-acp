kind: pipeline
name: code-analyze-check
type: kubernetes

trigger:
  branch: main
  event:
    - push
    - tag
steps:
  - name: clone xgov
    image: alpine/git
    commands:
      - bin/env.sh
      - source .env && echo "XXXX $${XGOV_SHA} $${BASE_IMAGE_APP_SHA}"
      - env
      - git clone https://github.com/XGovFormBuilder/digital-form-builder/
      - cd digital-form-builder
      - git checkout $${XGOV_SHA}
  - name: dev-run-tests-with-coverage
    pull: if-not-exists
    image: node:12.18.4-buster
    commands:
      - cd digital-form-builder
      - yarn test-cov
      - exit 1
  - name: sonar_scan
    pull: if-not-exists
    image: quay.digital.homeoffice.gov.uk/ukhomeofficedigital/sonar-scanner-node:6a03c77c7e1bad005893cdcc9cd3d99479b79d5c
      - cp sonar/sonar-project.properties digital-form-builder/
      - cp sonar/designer-sonar-project.properties digital-form-builder/designer/sonar-project.properties
      - cp sonar/model-sonar-project.properties digital-form-builder/model/sonar-project.properties
      - cp sonar/runner-sonar-project.properties digital-form-builder/runner/sonar-project.properties
      - sonar-scanner -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.projectBaseDir=digital-form-builder -Dsonar.projectKey=digital-form-builder
    when:
      branch:
        - main
      event:
        - push
        - tag
---
kind: pipeline
name: designer
type: kubernetes
trigger:
  branch: main
  event:
    - push
    - tag
steps:
  - name: setup tags
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - source .env
      - echo "Current XGOV tag $${XGOV_TAG}"
      - echo $${XGOV_TAG} > .tags
    volumes:
      - name: dockerclientconfig
        path: /root/.docker
  - name: ecr-login
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/dind-awscli:19.03.12-dind-1.18.55
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: DESIGNER_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: DESIGNER_AWS_SECRET_ACCESS_KEY
      AWS_REGION: eu-west-2
    commands:
      - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
      - aws ecr get-login-password --region $${AWS_REGION} | docker login --username AWS --password-stdin 340268328991.dkr.ecr.$${AWS_REGION}.amazonaws.com
    volumes:
      - name: dockerclientconfig
        path: /root/.docker
    depends_on:
      - setup tags
  - name: build docker tag
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - export BASE_IMAGE_TAG=$(cat .tags)
      - echo "Using base image  from TAG - $BASE_IMAGE_TAG"
      - bin/env.sh
      - docker build --build-arg BASE_IMAGE_TAG=$${BASE_IMAGE_TAG} -t digital-form-builder-designer:$${DRONE_COMMIT_SHA} -t digital-form-builder-designer:latest designer/. --no-cache
    volumes:
      - name: dockerclientconfig
        path: /root/.docker
    depends_on:
      - setup tags
  - name: anchore scan
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
    pull: always
    environment:
      IMAGE_NAME: digital-form-builder-designer:${DRONE_COMMIT_SHA}
    volumes:
      - name: dockerclientconfig
        path: /root/.docker
    depends_on:
      - build docker tag

depends_on:
  - code-analyze-check


services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  
  - name: anchore-submission-server
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
    pull: always
    commands:
      - /run.sh server

volumes:
  - name: dockerclientconfig
    temp: {}